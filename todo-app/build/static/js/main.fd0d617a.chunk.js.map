{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","className","type","todo","fontSize","onClick","e","event","collection","doc","id","delete","Modal","onClose","placeholder","value","onChange","target","Button","variant","set","merge","root","margin","useStyles4Button","extendedIcon","marginRight","App","todos","setTodos","classes4Button","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","noValidate","autoComplete","TextField","label","disabled","preventDefault","add","timestamp","FieldValue","serverTimestamp","size","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd0d617a.chunk.js","sourcesContent":["// const firebaseConfig = {\r\n\r\n//   };\r\n\r\nimport firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAl4BvZxaM8p7PQx-icKKVtoYhMuMGdQ_o\",\r\n    authDomain: \"todo-app-62fa2.firebaseapp.com\",\r\n    databaseURL: \"https://todo-app-62fa2.firebaseio.com\",\r\n    projectId: \"todo-app-62fa2\",\r\n    storageBucket: \"todo-app-62fa2.appspot.com\",\r\n    messagingSenderId: \"268818981681\",\r\n    appId: \"1:268818981681:web:d63af2b841e34438ec0610\",\r\n    measurementId: \"G-F1RRG9NN4Y\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState } from 'react';\r\nimport './Todo.css';\r\nimport db from './firebase';\r\nimport { Modal, makeStyles, Button } from '@material-ui/core';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever'; // material ui icon import ile ceke bilirsen\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    }, //modalin cssi\r\n}));\r\n\r\nfunction Todo(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [input, setInput] = useState();\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const updateToDo = () => {\r\n        // uptade the todo with the new input text\r\n\r\n        db.collection('todos').doc(props.todo.id).set({\r\n            todo: input\r\n        }, { merge: true })\r\n\r\n        setOpen(false);\r\n    }\r\n    // remove mdi mdi-close-circle-outline\r\n    // width: 600, marginRight: 370\r\n    return (\r\n        <div  className=\"container card w-50\">\r\n\r\n            <div className=\"list-wrapper\">\r\n                <ul className=\"d-flex flex-column-reverse todo-list\">\r\n                    <li>\r\n                        <div className=\"form-check float-left bg-blue\">\r\n                            <label className=\"form-check-label\">\r\n                                <input className=\"checkbox\" type=\"checkbox\" />{props.todo.todo}<i className=\"input-helper\"></i>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"enSonaAl\">\r\n                            <EditIcon fontSize=\"small\" onClick={e => setOpen(true)}></EditIcon>\r\n                            <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()}></DeleteForeverIcon>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n\r\n            <Modal open={open} onClose={e => setOpen(false)}>\r\n                <div className={classes.paper}>\r\n                    <h1>I am a modal</h1>\r\n                    <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)} />\r\n                    <Button variant=\"primary\" onClick={updateToDo}>Update ToDo</Button>\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState, useEffect } from 'react';\nimport Todo from './Todo';\nimport './App.css';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport { TextField, makeStyles, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst useStyles4Button = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  extendedIcon: {\n    marginRight: theme.spacing(1),\n  },\n}));\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n  const classes = useStyles();\n  const classes4Button = useStyles4Button();\n\n  useEffect(() => {\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({ id: doc.id, todo: doc.data().todo })))\n    })\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n\n    setTodos([...todos, input]);\n    setInput('');\n  }\n \n  // onKeyPress={(ev)=>{if(ev.key === 'Enter'){ev.preventDefault()}}}\n  return (\n    <div className=\"App\">\n      <h1>List4ToDo â˜˜  </h1>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <TextField value={input} onChange={event => setInput(event.target.value)} id=\"standard-basic\" label=\"Type a ToDo\" />\n        <Button disabled={!input} onClick={addTodo} id=\"addButton\" variant=\"outlined\" size=\"small\" color=\"primary\" className={classes4Button.margin}>\n          Add\n        </Button>\n      </form>\n\n      <ul>\n        {todos.map(todo => (\n          <Todo todo={todo} />\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}